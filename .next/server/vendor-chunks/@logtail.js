"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@logtail";
exports.ids = ["vendor-chunks/@logtail"];
exports.modules = {

/***/ "(rsc)/./node_modules/@logtail/core/dist/es6/base.js":
/*!*****************************************************!*\
  !*** ./node_modules/@logtail/core/dist/es6/base.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _logtail_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @logtail/types */ \"(rsc)/./node_modules/@logtail/types/dist/es6/types.js\");\n/* harmony import */ var _logtail_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @logtail/tools */ \"(rsc)/./node_modules/@logtail/tools/dist/es6/batch.js\");\n/* harmony import */ var _logtail_tools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @logtail/tools */ \"(rsc)/./node_modules/@logtail/tools/dist/es6/throttle.js\");\n/* harmony import */ var _logtail_tools__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @logtail/tools */ \"(rsc)/./node_modules/@logtail/tools/dist/es6/burstProtection.js\");\n/* harmony import */ var serialize_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! serialize-error */ \"(rsc)/./node_modules/serialize-error/index.js\");\n/* harmony import */ var serialize_error__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(serialize_error__WEBPACK_IMPORTED_MODULE_0__);\n\n\n\n// Set default options for Logtail\nconst defaultOptions = {\n    // Default sync endpoint (protocol + domain)\n    endpoint: \"https://in.logs.betterstack.com\",\n    // Maximum number of logs to sync in a single request to Better Stack\n    batchSize: 1000,\n    // Size of logs (in KiB) to trigger sync to Better Stack (0 to disable)\n    batchSizeKiB: 0,\n    // Max interval (in milliseconds) before a batch of logs proceeds to syncing\n    batchInterval: 1000,\n    // Maximum number of times to retry a failed sync request\n    retryCount: 3,\n    // Minimum number of milliseconds to wait before retrying a failed sync request\n    retryBackoff: 100,\n    // Maximum number of sync requests to make concurrently\n    syncMax: 5,\n    // Length of the checked window for logs burst protection in milliseconds (0 to disable)\n    burstProtectionMilliseconds: 5000,\n    // Maximum number of accepted logs in the specified time window (0 to disable)\n    burstProtectionMax: 10000,\n    // If true, errors when sending logs will be ignored\n    // Has precedence over throwExceptions\n    ignoreExceptions: false,\n    // If true, errors when sending logs will result in a thrown exception\n    throwExceptions: false,\n    // Maximum depth (number of attribute levels) of a context object\n    contextObjectMaxDepth: 50,\n    // Produce a warn log when context object max depth is reached\n    contextObjectMaxDepthWarn: true,\n    // Produce a warning when circular reference is found in context object\n    contextObjectCircularRefWarn: true,\n    // If true, all logs will be sent to standard console output functions (console.info, console.warn, ...)\n    sendLogsToConsoleOutput: false,\n    // If true, all logs will be sent to Better Stack\n    sendLogsToBetterStack: true,\n    // Function to be used to calculate size of logs in bytes (to evaluate batchSizeLimitKiB)\n    calculateLogSizeBytes: _logtail_tools__WEBPACK_IMPORTED_MODULE_1__.calculateJsonLogSizeBytes,\n};\n/**\n * Logtail core class for logging to the Better Stack service\n */\nclass Logtail {\n    /* CONSTRUCTOR */\n    /**\n     * Initializes a new Logtail instance\n     *\n     * @param sourceToken: string - Private source token for logging to Better Stack\n     * @param options?: ILogtailOptions - Optionally specify Logtail options\n     */\n    constructor(sourceToken, options) {\n        // Middleware\n        this._middleware = [];\n        // Number of logs logged\n        this._countLogged = 0;\n        // Number of logs successfully synced with Logtail\n        this._countSynced = 0;\n        // Number of logs that failed to be synced to Logtail\n        this._countDropped = 0;\n        // First, check we have a valid source token\n        if (typeof sourceToken !== \"string\" || sourceToken === \"\") {\n            throw new Error(\"Logtail source token missing\");\n        }\n        // Store the source token, to use for syncing with Better Stack\n        this._sourceToken = sourceToken;\n        // Merge default and user options\n        this._options = Object.assign(Object.assign({}, defaultOptions), options);\n        // Create a throttler, for sync operations\n        const throttle = (0,_logtail_tools__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this._options.syncMax);\n        // Sync after throttling\n        const throttler = throttle((logs) => {\n            return this._sync(logs);\n        });\n        // Burst protection for logging\n        this._logBurstProtection = (0,_logtail_tools__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this._options.burstProtectionMilliseconds, this._options.burstProtectionMax, \"Logging\");\n        this.log = this._logBurstProtection(this.log.bind(this));\n        // Create a batcher, for aggregating logs by buffer size/interval\n        const batcher = (0,_logtail_tools__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this._options.batchSize, this._options.batchInterval, this._options.retryCount, this._options.retryBackoff, this._options.batchSizeKiB * 1024, this._options.calculateLogSizeBytes);\n        this._batch = batcher.initPusher((logs) => {\n            return throttler(logs);\n        });\n        this._flush = batcher.flush;\n    }\n    /* PUBLIC METHODS */\n    /**\n     * Flush batched logs to Logtail\n     */\n    async flush() {\n        return this._flush();\n    }\n    /**\n     * Number of entries logged\n     *\n     * @returns number\n     */\n    get logged() {\n        return this._countLogged;\n    }\n    /**\n     * Number of log entries synced with Better Stack\n     *\n     * @returns number\n     */\n    get synced() {\n        return this._countSynced;\n    }\n    /**\n     * Number of entries dropped\n     *\n     * @returns number\n     */\n    get dropped() {\n        return this._countDropped;\n    }\n    /**\n     * Log an entry, to be synced with Better Stack\n     *\n     * @param message: string - Log message\n     * @param level (LogLevel) - Level to log at (debug|info|warn|error)\n     * @param context: (Context) - Context (optional)\n     * @returns Promise<ILogtailLog> after syncing\n     */\n    async log(message, level = _logtail_types__WEBPACK_IMPORTED_MODULE_4__.LogLevel.Info, context = {}) {\n        // Wrap context in an object, if it's not already\n        if (typeof context !== \"object\") {\n            const wrappedContext = { extra: context };\n            context = wrappedContext;\n        }\n        if (context instanceof Error) {\n            const wrappedContext = { error: context };\n            context = wrappedContext;\n        }\n        if (this._options.sendLogsToConsoleOutput) {\n            switch (level) {\n                case \"debug\":\n                    console.debug(message, context);\n                    break;\n                case \"info\":\n                    console.info(message, context);\n                    break;\n                case \"warn\":\n                    console.warn(message, context);\n                    break;\n                case \"error\":\n                    console.error(message, context);\n                    break;\n                default:\n                    console.log(`[${level.toUpperCase()}]`, message, context);\n                    break;\n            }\n        }\n        // Check that we have a sync function\n        if (typeof this._sync !== \"function\") {\n            throw new Error(\"No Logtail logger sync function provided\");\n        }\n        // Increment log count\n        this._countLogged++;\n        // Start building the log message\n        let log = Object.assign(Object.assign({ \n            // Implicit date timestamp\n            dt: new Date(), \n            // Explicit level\n            level }, context), (message instanceof Error ? (0,serialize_error__WEBPACK_IMPORTED_MODULE_0__.serializeError)(message) : { message }));\n        let transformedLog = log;\n        for (const middleware of this._middleware) {\n            let newTransformedLog = await middleware(transformedLog);\n            if (newTransformedLog == null) {\n                // Don't push the log if it was filtered out in a middleware\n                return transformedLog;\n            }\n            transformedLog = newTransformedLog;\n        }\n        // Manually serialize the log data\n        transformedLog = this.serialize(transformedLog, this._options.contextObjectMaxDepth);\n        if (!this._options.sendLogsToBetterStack) {\n            // Return the resulting log before sending it\n            return transformedLog;\n        }\n        try {\n            // Push the log through the batcher, and sync\n            await this._batch(transformedLog);\n            // Increment sync count\n            this._countSynced++;\n        }\n        catch (e) {\n            // Increment dropped count\n            this._countDropped++;\n            // Catch any errors - re-throw if `ignoreExceptions` == false\n            if (!this._options.ignoreExceptions) {\n                if (this._options.throwExceptions) {\n                    throw e;\n                }\n                else {\n                    // Output to console\n                    console.error(e);\n                }\n            }\n        }\n        // Return the resulting log\n        return transformedLog;\n    }\n    serialize(value, maxDepth, visitedObjects = new WeakSet()) {\n        if (value === null || typeof value === \"boolean\" || typeof value === \"number\" || typeof value === \"string\") {\n            return value;\n        }\n        else if (value instanceof Date) {\n            // Date instances can be invalid & toISOString() will fail\n            if (isNaN(value.getTime())) {\n                return value.toString();\n            }\n            return value.toISOString();\n        }\n        else if (value instanceof Error) {\n            return (0,serialize_error__WEBPACK_IMPORTED_MODULE_0__.serializeError)(value);\n        }\n        else if ((typeof value === \"object\" || Array.isArray(value)) && (maxDepth < 1 || visitedObjects.has(value))) {\n            if (visitedObjects.has(value)) {\n                if (this._options.contextObjectCircularRefWarn) {\n                    console.warn(`[Logtail] Found a circular reference when serializing logs. Please do not use circular references in your logs.`);\n                }\n                return \"<omitted circular reference>\";\n            }\n            if (this._options.contextObjectMaxDepthWarn) {\n                console.warn(`[Logtail] Max depth of ${this._options.contextObjectMaxDepth} reached when serializing logs. Please do not use excessive object depth in your logs.`);\n            }\n            return `<omitted context beyond configured max depth: ${this._options.contextObjectMaxDepth}>`;\n        }\n        else if (Array.isArray(value)) {\n            visitedObjects.add(value);\n            const serializedArray = value.map((item) => this.serialize(item, maxDepth - 1, visitedObjects));\n            visitedObjects.delete(value);\n            return serializedArray;\n        }\n        else if (typeof value === \"object\") {\n            const serializedObject = {};\n            visitedObjects.add(value);\n            Object.entries(value).forEach((item) => {\n                const key = item[0];\n                const value = item[1];\n                const serializedValue = this.serialize(value, maxDepth - 1, visitedObjects);\n                if (serializedValue !== undefined) {\n                    serializedObject[key] = serializedValue;\n                }\n            });\n            visitedObjects.delete(value);\n            return serializedObject;\n        }\n        else if (typeof value === \"undefined\") {\n            return undefined;\n        }\n        else {\n            return `<omitted unserializable ${typeof value}>`;\n        }\n    }\n    /**\n     *\n     * Debug level log, to be synced with Better Stack\n     *\n     * @param message: string - Log message\n     * @param context: (Pick<ILogtailLog, \"context\">) - Context (optional)\n     * @returns Promise<ILogtailLog> after syncing\n     */\n    async debug(message, context = {}) {\n        return this.log(message, _logtail_types__WEBPACK_IMPORTED_MODULE_4__.LogLevel.Debug, context);\n    }\n    /**\n     *\n     * Info level log, to be synced with Better Stack\n     *\n     * @param message: string - Log message\n     * @param context: (Pick<ILogtailLog, \"context\">) - Context (optional)\n     * @returns Promise<ILogtailLog> after syncing\n     */\n    async info(message, context = {}) {\n        return this.log(message, _logtail_types__WEBPACK_IMPORTED_MODULE_4__.LogLevel.Info, context);\n    }\n    /**\n     *\n     * Warning level log, to be synced with Better Stack\n     *\n     * @param message: string - Log message\n     * @param context: (Pick<ILogtailLog, \"context\">) - Context (optional)\n     * @returns Promise<ILogtailLog> after syncing\n     */\n    async warn(message, context = {}) {\n        return this.log(message, _logtail_types__WEBPACK_IMPORTED_MODULE_4__.LogLevel.Warn, context);\n    }\n    /**\n     *\n     * Warning level log, to be synced with Better Stack\n     *\n     * @param message: string - Log message\n     * @param context: (Pick<ILogtailLog, \"context\">) - Context (optional)\n     * @returns Promise<ILogtailLog> after syncing\n     */\n    async error(message, context = {}) {\n        return this.log(message, _logtail_types__WEBPACK_IMPORTED_MODULE_4__.LogLevel.Error, context);\n    }\n    /**\n     * Sets the sync method - i.e. the final step in the pipeline to get logs\n     * over to Better Stack\n     *\n     * @param fn - Pipeline function to use as sync method\n     */\n    setSync(fn) {\n        this._sync = fn;\n    }\n    /**\n     * Add a middleware function to the logging pipeline\n     *\n     * @param fn - Function to add to the log pipeline\n     * @returns void\n     */\n    use(fn) {\n        this._middleware.push(fn);\n    }\n    /**\n     * Remove a function from the pipeline\n     *\n     * @param fn - Pipeline function\n     * @returns void\n     */\n    remove(fn) {\n        this._middleware = this._middleware.filter((p) => p !== fn);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class extends Logtail {\n    async log(message, level = _logtail_types__WEBPACK_IMPORTED_MODULE_4__.LogLevel.Info, context = {}) {\n        return super.log(message, level, context);\n    }\n});\n//# sourceMappingURL=base.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@logtail/core/dist/es6/base.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@logtail/node/dist/es6/context.js":
/*!********************************************************!*\
  !*** ./node_modules/@logtail/node/dist/es6/context.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getStackContext: () => (/* binding */ getStackContext)\n/* harmony export */ });\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! path */ \"path\");\n/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var stack_trace__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! stack-trace */ \"(rsc)/./node_modules/stack-trace/lib/stack-trace.js\");\n\n\nconst mainFile = mainFileName();\n/**\n * Determines the file name and the line number from which the log\n * was initiated (if we're able to tell).\n *\n * @returns Context The caller's filename and the line number\n */\nfunction getStackContext(logtail, stackContextHint) {\n    const stackFrame = getCallingFrame(logtail, stackContextHint);\n    if (stackFrame === null)\n        return {};\n    return {\n        context: {\n            runtime: {\n                file: relativeToMainModule(stackFrame.getFileName()),\n                type: stackFrame.getTypeName(),\n                method: stackFrame.getMethodName(),\n                function: stackFrame.getFunctionName(),\n                line: stackFrame.getLineNumber(),\n                column: stackFrame.getColumnNumber(),\n            },\n            system: {\n                pid: process.pid,\n                main_file: mainFile,\n            },\n        },\n    };\n}\nfunction getCallingFrame(logtail, stackContextHint) {\n    for (let fn of [logtail.warn, logtail.error, logtail.info, logtail.debug, logtail.log]) {\n        const stack = stack_trace__WEBPACK_IMPORTED_MODULE_1__.get(fn);\n        if ((stack === null || stack === void 0 ? void 0 : stack.length) > 0)\n            return getRelevantStackFrame(stack, stackContextHint);\n    }\n    return null;\n}\nfunction getRelevantStackFrame(frames, stackContextHint) {\n    if (stackContextHint) {\n        frames.reverse();\n        let index = frames.findIndex((frame) => {\n            var _a;\n            return (((_a = frame.getFileName()) === null || _a === void 0 ? void 0 : _a.includes(stackContextHint.fileName)) &&\n                (stackContextHint.methodNames.includes(frame.getMethodName()) ||\n                    stackContextHint.methodNames.includes(frame.getFunctionName())));\n        });\n        if (index > 0) {\n            return frames[index - 1];\n        }\n        if (stackContextHint.required) {\n            return null;\n        }\n        return frames[frames.length - 1];\n    }\n    return frames[0];\n}\nfunction relativeToMainModule(fileName) {\n    if (typeof fileName !== \"string\") {\n        return null;\n    }\n    else if (fileName.startsWith(\"file:/\")) {\n        const url = new URL(fileName);\n        return url.pathname;\n    }\n    else {\n        const rootPath = (0,path__WEBPACK_IMPORTED_MODULE_0__.dirname)(mainFileName());\n        return (0,path__WEBPACK_IMPORTED_MODULE_0__.relative)(rootPath, fileName);\n    }\n}\nfunction mainFileName() {\n    let argv = process === null || process === void 0 ? void 0 : process.argv;\n    if (argv === undefined)\n        return \"\";\n    // return first js file argument - arg ending in .js\n    for (const arg of argv) {\n        if (typeof arg !== \"string\" || arg.startsWith(\"-\")) {\n            // break on first option\n            break;\n        }\n        if (arg.endsWith(\".js\")) {\n            return arg;\n        }\n    }\n    return \"\";\n}\n//# sourceMappingURL=context.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxvZ3RhaWwvbm9kZS9kaXN0L2VzNi9jb250ZXh0LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBeUM7QUFDSjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsNENBQWM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNkNBQU87QUFDaEMsZUFBZSw4Q0FBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXHByb2plY3RzXFxhdHNcXG5vZGVfbW9kdWxlc1xcQGxvZ3RhaWxcXG5vZGVcXGRpc3RcXGVzNlxcY29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkaXJuYW1lLCByZWxhdGl2ZSB9IGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgc3RhY2tUcmFjZSBmcm9tIFwic3RhY2stdHJhY2VcIjtcbmNvbnN0IG1haW5GaWxlID0gbWFpbkZpbGVOYW1lKCk7XG4vKipcbiAqIERldGVybWluZXMgdGhlIGZpbGUgbmFtZSBhbmQgdGhlIGxpbmUgbnVtYmVyIGZyb20gd2hpY2ggdGhlIGxvZ1xuICogd2FzIGluaXRpYXRlZCAoaWYgd2UncmUgYWJsZSB0byB0ZWxsKS5cbiAqXG4gKiBAcmV0dXJucyBDb250ZXh0IFRoZSBjYWxsZXIncyBmaWxlbmFtZSBhbmQgdGhlIGxpbmUgbnVtYmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGFja0NvbnRleHQobG9ndGFpbCwgc3RhY2tDb250ZXh0SGludCkge1xuICAgIGNvbnN0IHN0YWNrRnJhbWUgPSBnZXRDYWxsaW5nRnJhbWUobG9ndGFpbCwgc3RhY2tDb250ZXh0SGludCk7XG4gICAgaWYgKHN0YWNrRnJhbWUgPT09IG51bGwpXG4gICAgICAgIHJldHVybiB7fTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICBydW50aW1lOiB7XG4gICAgICAgICAgICAgICAgZmlsZTogcmVsYXRpdmVUb01haW5Nb2R1bGUoc3RhY2tGcmFtZS5nZXRGaWxlTmFtZSgpKSxcbiAgICAgICAgICAgICAgICB0eXBlOiBzdGFja0ZyYW1lLmdldFR5cGVOYW1lKCksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBzdGFja0ZyYW1lLmdldE1ldGhvZE5hbWUoKSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbjogc3RhY2tGcmFtZS5nZXRGdW5jdGlvbk5hbWUoKSxcbiAgICAgICAgICAgICAgICBsaW5lOiBzdGFja0ZyYW1lLmdldExpbmVOdW1iZXIoKSxcbiAgICAgICAgICAgICAgICBjb2x1bW46IHN0YWNrRnJhbWUuZ2V0Q29sdW1uTnVtYmVyKCksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3lzdGVtOiB7XG4gICAgICAgICAgICAgICAgcGlkOiBwcm9jZXNzLnBpZCxcbiAgICAgICAgICAgICAgICBtYWluX2ZpbGU6IG1haW5GaWxlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZnVuY3Rpb24gZ2V0Q2FsbGluZ0ZyYW1lKGxvZ3RhaWwsIHN0YWNrQ29udGV4dEhpbnQpIHtcbiAgICBmb3IgKGxldCBmbiBvZiBbbG9ndGFpbC53YXJuLCBsb2d0YWlsLmVycm9yLCBsb2d0YWlsLmluZm8sIGxvZ3RhaWwuZGVidWcsIGxvZ3RhaWwubG9nXSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IHN0YWNrVHJhY2UuZ2V0KGZuKTtcbiAgICAgICAgaWYgKChzdGFjayA9PT0gbnVsbCB8fCBzdGFjayA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3RhY2subGVuZ3RoKSA+IDApXG4gICAgICAgICAgICByZXR1cm4gZ2V0UmVsZXZhbnRTdGFja0ZyYW1lKHN0YWNrLCBzdGFja0NvbnRleHRIaW50KTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBnZXRSZWxldmFudFN0YWNrRnJhbWUoZnJhbWVzLCBzdGFja0NvbnRleHRIaW50KSB7XG4gICAgaWYgKHN0YWNrQ29udGV4dEhpbnQpIHtcbiAgICAgICAgZnJhbWVzLnJldmVyc2UoKTtcbiAgICAgICAgbGV0IGluZGV4ID0gZnJhbWVzLmZpbmRJbmRleCgoZnJhbWUpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAoKChfYSA9IGZyYW1lLmdldEZpbGVOYW1lKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pbmNsdWRlcyhzdGFja0NvbnRleHRIaW50LmZpbGVOYW1lKSkgJiZcbiAgICAgICAgICAgICAgICAoc3RhY2tDb250ZXh0SGludC5tZXRob2ROYW1lcy5pbmNsdWRlcyhmcmFtZS5nZXRNZXRob2ROYW1lKCkpIHx8XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrQ29udGV4dEhpbnQubWV0aG9kTmFtZXMuaW5jbHVkZXMoZnJhbWUuZ2V0RnVuY3Rpb25OYW1lKCkpKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJhbWVzW2luZGV4IC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YWNrQ29udGV4dEhpbnQucmVxdWlyZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcmFtZXNbZnJhbWVzLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICByZXR1cm4gZnJhbWVzWzBdO1xufVxuZnVuY3Rpb24gcmVsYXRpdmVUb01haW5Nb2R1bGUoZmlsZU5hbWUpIHtcbiAgICBpZiAodHlwZW9mIGZpbGVOYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBlbHNlIGlmIChmaWxlTmFtZS5zdGFydHNXaXRoKFwiZmlsZTovXCIpKSB7XG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoZmlsZU5hbWUpO1xuICAgICAgICByZXR1cm4gdXJsLnBhdGhuYW1lO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3Qgcm9vdFBhdGggPSBkaXJuYW1lKG1haW5GaWxlTmFtZSgpKTtcbiAgICAgICAgcmV0dXJuIHJlbGF0aXZlKHJvb3RQYXRoLCBmaWxlTmFtZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gbWFpbkZpbGVOYW1lKCkge1xuICAgIGxldCBhcmd2ID0gcHJvY2VzcyA9PT0gbnVsbCB8fCBwcm9jZXNzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcm9jZXNzLmFyZ3Y7XG4gICAgaWYgKGFyZ3YgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgLy8gcmV0dXJuIGZpcnN0IGpzIGZpbGUgYXJndW1lbnQgLSBhcmcgZW5kaW5nIGluIC5qc1xuICAgIGZvciAoY29uc3QgYXJnIG9mIGFyZ3YpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcgIT09IFwic3RyaW5nXCIgfHwgYXJnLnN0YXJ0c1dpdGgoXCItXCIpKSB7XG4gICAgICAgICAgICAvLyBicmVhayBvbiBmaXJzdCBvcHRpb25cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmcuZW5kc1dpdGgoXCIuanNcIikpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFwiXCI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb250ZXh0LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@logtail/node/dist/es6/context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@logtail/node/dist/es6/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@logtail/node/dist/es6/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Logtail: () => (/* reexport safe */ _node__WEBPACK_IMPORTED_MODULE_0__.Node)\n/* harmony export */ });\n/* harmony import */ var _node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node */ \"(rsc)/./node_modules/@logtail/node/dist/es6/node.js\");\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxvZ3RhaWwvbm9kZS9kaXN0L2VzNi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE4QjtBQUNIO0FBQzNCIiwic291cmNlcyI6WyJEOlxccHJvamVjdHNcXGF0c1xcbm9kZV9tb2R1bGVzXFxAbG9ndGFpbFxcbm9kZVxcZGlzdFxcZXM2XFxpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb2RlIH0gZnJvbSBcIi4vbm9kZVwiO1xuZXhwb3J0IHsgTm9kZSBhcyBMb2d0YWlsIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@logtail/node/dist/es6/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@logtail/node/dist/es6/node.js":
/*!*****************************************************!*\
  !*** ./node_modules/@logtail/node/dist/es6/node.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Node: () => (/* binding */ Node)\n/* harmony export */ });\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cross-fetch */ \"(rsc)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _msgpack_msgpack__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @msgpack/msgpack */ \"(rsc)/./node_modules/@msgpack/msgpack/dist.es5+esm/encode.mjs\");\n/* harmony import */ var _logtail_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @logtail/core */ \"(rsc)/./node_modules/@logtail/core/dist/es6/base.js\");\n/* harmony import */ var _context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./context */ \"(rsc)/./node_modules/@logtail/node/dist/es6/context.js\");\n\n\n\n\nclass Node extends _logtail_core__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(sourceToken, options) {\n        super(sourceToken, options);\n        // Sync function\n        const sync = async (logs) => {\n            const res = await cross_fetch__WEBPACK_IMPORTED_MODULE_0___default()(this._options.endpoint, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/msgpack\",\n                    Authorization: `Bearer ${this._sourceToken}`,\n                    \"User-Agent\": \"logtail-js(node)\",\n                },\n                body: this.encodeAsMsgpack(logs),\n            });\n            if (res.ok) {\n                return logs;\n            }\n            throw new Error(res.statusText);\n        };\n        // Set the throttled sync function\n        this.setSync(sync);\n    }\n    /**\n     * Override `Base` log to enable Node.js streaming\n     *\n     * @param message: string - Log message\n     * @param level (LogLevel) - Level to log at (debug|info|warn|error)\n     * @param context: (Context) - Log context for passing structured data\n     * @param stackContextHint: (StackContextHint|null) - Info about which methods to consider as origin in context.runtime\n     * @returns Promise<ILogtailLog> after syncing\n     */\n    async log(message, level, context = {}, stackContextHint) {\n        // Process/sync the log, per `Base` logic\n        context = Object.assign(Object.assign({}, (0,_context__WEBPACK_IMPORTED_MODULE_1__.getStackContext)(this, stackContextHint)), context);\n        const processedLog = await super.log(message, level, context);\n        // Push the processed log to the stream, for piping\n        if (this._writeStream) {\n            this._writeStream.write(JSON.stringify(processedLog) + \"\\n\");\n        }\n        // Return the transformed log\n        return processedLog;\n    }\n    /**\n     * Pipe JSON stringified `ILogtailLog` to a stream after syncing\n     *\n     * @param stream - Writable|Duplex stream\n     */\n    pipe(stream) {\n        this._writeStream = stream;\n        return stream;\n    }\n    encodeAsMsgpack(logs) {\n        const encoded = (0,_msgpack_msgpack__WEBPACK_IMPORTED_MODULE_3__.encode)(logs);\n        const buffer = Buffer.from(encoded.buffer, encoded.byteOffset, encoded.byteLength);\n        return buffer;\n    }\n}\n//# sourceMappingURL=node.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxvZ3RhaWwvbm9kZS9kaXN0L2VzNi9ub2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFnQztBQUNVO0FBQ0w7QUFDTztBQUNyQyxtQkFBbUIscURBQUk7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0RBQUs7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLGtCQUFrQjtBQUMvRDtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0EsZ0RBQWdELEVBQUUseURBQWU7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHdEQUFNO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxwcm9qZWN0c1xcYXRzXFxub2RlX21vZHVsZXNcXEBsb2d0YWlsXFxub2RlXFxkaXN0XFxlczZcXG5vZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZldGNoIGZyb20gXCJjcm9zcy1mZXRjaFwiO1xuaW1wb3J0IHsgZW5jb2RlIH0gZnJvbSBcIkBtc2dwYWNrL21zZ3BhY2tcIjtcbmltcG9ydCB7IEJhc2UgfSBmcm9tIFwiQGxvZ3RhaWwvY29yZVwiO1xuaW1wb3J0IHsgZ2V0U3RhY2tDb250ZXh0IH0gZnJvbSBcIi4vY29udGV4dFwiO1xuZXhwb3J0IGNsYXNzIE5vZGUgZXh0ZW5kcyBCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2VUb2tlbiwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihzb3VyY2VUb2tlbiwgb3B0aW9ucyk7XG4gICAgICAgIC8vIFN5bmMgZnVuY3Rpb25cbiAgICAgICAgY29uc3Qgc3luYyA9IGFzeW5jIChsb2dzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCh0aGlzLl9vcHRpb25zLmVuZHBvaW50LCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vbXNncGFja1wiLFxuICAgICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy5fc291cmNlVG9rZW59YCxcbiAgICAgICAgICAgICAgICAgICAgXCJVc2VyLUFnZW50XCI6IFwibG9ndGFpbC1qcyhub2RlKVwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYm9keTogdGhpcy5lbmNvZGVBc01zZ3BhY2sobG9ncyksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9ncztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihyZXMuc3RhdHVzVGV4dCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIFNldCB0aGUgdGhyb3R0bGVkIHN5bmMgZnVuY3Rpb25cbiAgICAgICAgdGhpcy5zZXRTeW5jKHN5bmMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBgQmFzZWAgbG9nIHRvIGVuYWJsZSBOb2RlLmpzIHN0cmVhbWluZ1xuICAgICAqXG4gICAgICogQHBhcmFtIG1lc3NhZ2U6IHN0cmluZyAtIExvZyBtZXNzYWdlXG4gICAgICogQHBhcmFtIGxldmVsIChMb2dMZXZlbCkgLSBMZXZlbCB0byBsb2cgYXQgKGRlYnVnfGluZm98d2FybnxlcnJvcilcbiAgICAgKiBAcGFyYW0gY29udGV4dDogKENvbnRleHQpIC0gTG9nIGNvbnRleHQgZm9yIHBhc3Npbmcgc3RydWN0dXJlZCBkYXRhXG4gICAgICogQHBhcmFtIHN0YWNrQ29udGV4dEhpbnQ6IChTdGFja0NvbnRleHRIaW50fG51bGwpIC0gSW5mbyBhYm91dCB3aGljaCBtZXRob2RzIHRvIGNvbnNpZGVyIGFzIG9yaWdpbiBpbiBjb250ZXh0LnJ1bnRpbWVcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlPElMb2d0YWlsTG9nPiBhZnRlciBzeW5jaW5nXG4gICAgICovXG4gICAgYXN5bmMgbG9nKG1lc3NhZ2UsIGxldmVsLCBjb250ZXh0ID0ge30sIHN0YWNrQ29udGV4dEhpbnQpIHtcbiAgICAgICAgLy8gUHJvY2Vzcy9zeW5jIHRoZSBsb2csIHBlciBgQmFzZWAgbG9naWNcbiAgICAgICAgY29udGV4dCA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgZ2V0U3RhY2tDb250ZXh0KHRoaXMsIHN0YWNrQ29udGV4dEhpbnQpKSwgY29udGV4dCk7XG4gICAgICAgIGNvbnN0IHByb2Nlc3NlZExvZyA9IGF3YWl0IHN1cGVyLmxvZyhtZXNzYWdlLCBsZXZlbCwgY29udGV4dCk7XG4gICAgICAgIC8vIFB1c2ggdGhlIHByb2Nlc3NlZCBsb2cgdG8gdGhlIHN0cmVhbSwgZm9yIHBpcGluZ1xuICAgICAgICBpZiAodGhpcy5fd3JpdGVTdHJlYW0pIHtcbiAgICAgICAgICAgIHRoaXMuX3dyaXRlU3RyZWFtLndyaXRlKEpTT04uc3RyaW5naWZ5KHByb2Nlc3NlZExvZykgKyBcIlxcblwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBSZXR1cm4gdGhlIHRyYW5zZm9ybWVkIGxvZ1xuICAgICAgICByZXR1cm4gcHJvY2Vzc2VkTG9nO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQaXBlIEpTT04gc3RyaW5naWZpZWQgYElMb2d0YWlsTG9nYCB0byBhIHN0cmVhbSBhZnRlciBzeW5jaW5nXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RyZWFtIC0gV3JpdGFibGV8RHVwbGV4IHN0cmVhbVxuICAgICAqL1xuICAgIHBpcGUoc3RyZWFtKSB7XG4gICAgICAgIHRoaXMuX3dyaXRlU3RyZWFtID0gc3RyZWFtO1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH1cbiAgICBlbmNvZGVBc01zZ3BhY2sobG9ncykge1xuICAgICAgICBjb25zdCBlbmNvZGVkID0gZW5jb2RlKGxvZ3MpO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuZnJvbShlbmNvZGVkLmJ1ZmZlciwgZW5jb2RlZC5ieXRlT2Zmc2V0LCBlbmNvZGVkLmJ5dGVMZW5ndGgpO1xuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@logtail/node/dist/es6/node.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@logtail/pino/dist/es6/helpers.js":
/*!********************************************************!*\
  !*** ./node_modules/@logtail/pino/dist/es6/helpers.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getLogLevel: () => (/* binding */ getLogLevel)\n/* harmony export */ });\n/* harmony import */ var _logtail_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @logtail/types */ \"(rsc)/./node_modules/@logtail/types/dist/es6/types.js\");\n\n/**\n * Return a Logtail `LogLevel` based on the Pino level\n * @param level number - Pino log level\n */\nfunction getLogLevel(level) {\n    // Trace 10\n    if (level <= 10) {\n        return _logtail_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Trace;\n    }\n    // Debug\n    if (level <= 20) {\n        return _logtail_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Debug;\n    }\n    // Info\n    if (level <= 30) {\n        return _logtail_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Info;\n    }\n    // Warn\n    if (level <= 40) {\n        return _logtail_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Warn;\n    }\n    // Error\n    if (level <= 50) {\n        return _logtail_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Error;\n    }\n    // Everything above this level is considered fatal\n    return _logtail_types__WEBPACK_IMPORTED_MODULE_0__.LogLevel.Fatal;\n}\n//# sourceMappingURL=helpers.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxvZ3RhaWwvcGluby9kaXN0L2VzNi9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsZUFBZSxvREFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9EQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0RBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvREFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9EQUFRO0FBQ3ZCO0FBQ0E7QUFDQSxXQUFXLG9EQUFRO0FBQ25CO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxwcm9qZWN0c1xcYXRzXFxub2RlX21vZHVsZXNcXEBsb2d0YWlsXFxwaW5vXFxkaXN0XFxlczZcXGhlbHBlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9nTGV2ZWwgfSBmcm9tIFwiQGxvZ3RhaWwvdHlwZXNcIjtcbi8qKlxuICogUmV0dXJuIGEgTG9ndGFpbCBgTG9nTGV2ZWxgIGJhc2VkIG9uIHRoZSBQaW5vIGxldmVsXG4gKiBAcGFyYW0gbGV2ZWwgbnVtYmVyIC0gUGlubyBsb2cgbGV2ZWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExvZ0xldmVsKGxldmVsKSB7XG4gICAgLy8gVHJhY2UgMTBcbiAgICBpZiAobGV2ZWwgPD0gMTApIHtcbiAgICAgICAgcmV0dXJuIExvZ0xldmVsLlRyYWNlO1xuICAgIH1cbiAgICAvLyBEZWJ1Z1xuICAgIGlmIChsZXZlbCA8PSAyMCkge1xuICAgICAgICByZXR1cm4gTG9nTGV2ZWwuRGVidWc7XG4gICAgfVxuICAgIC8vIEluZm9cbiAgICBpZiAobGV2ZWwgPD0gMzApIHtcbiAgICAgICAgcmV0dXJuIExvZ0xldmVsLkluZm87XG4gICAgfVxuICAgIC8vIFdhcm5cbiAgICBpZiAobGV2ZWwgPD0gNDApIHtcbiAgICAgICAgcmV0dXJuIExvZ0xldmVsLldhcm47XG4gICAgfVxuICAgIC8vIEVycm9yXG4gICAgaWYgKGxldmVsIDw9IDUwKSB7XG4gICAgICAgIHJldHVybiBMb2dMZXZlbC5FcnJvcjtcbiAgICB9XG4gICAgLy8gRXZlcnl0aGluZyBhYm92ZSB0aGlzIGxldmVsIGlzIGNvbnNpZGVyZWQgZmF0YWxcbiAgICByZXR1cm4gTG9nTGV2ZWwuRmF0YWw7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@logtail/pino/dist/es6/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@logtail/pino/dist/es6/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@logtail/pino/dist/es6/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _pino__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pino */ \"(rsc)/./node_modules/@logtail/pino/dist/es6/pino.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_pino__WEBPACK_IMPORTED_MODULE_0__.logtailTransport);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxvZ3RhaWwvcGluby9kaXN0L2VzNi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQztBQUMxQyxpRUFBZSxtREFBZ0IsRUFBQztBQUNoQyIsInNvdXJjZXMiOlsiRDpcXHByb2plY3RzXFxhdHNcXG5vZGVfbW9kdWxlc1xcQGxvZ3RhaWxcXHBpbm9cXGRpc3RcXGVzNlxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9ndGFpbFRyYW5zcG9ydCB9IGZyb20gXCIuL3Bpbm9cIjtcbmV4cG9ydCBkZWZhdWx0IGxvZ3RhaWxUcmFuc3BvcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@logtail/pino/dist/es6/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@logtail/pino/dist/es6/pino.js":
/*!*****************************************************!*\
  !*** ./node_modules/@logtail/pino/dist/es6/pino.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logtailTransport: () => (/* binding */ logtailTransport)\n/* harmony export */ });\n/* harmony import */ var pino_abstract_transport__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pino-abstract-transport */ \"(rsc)/./node_modules/pino-abstract-transport/index.js\");\n/* harmony import */ var pino_abstract_transport__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pino_abstract_transport__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _logtail_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @logtail/node */ \"(rsc)/./node_modules/@logtail/node/dist/es6/index.js\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ \"(rsc)/./node_modules/@logtail/pino/dist/es6/helpers.js\");\nvar __asyncValues = (undefined && undefined.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\n\n\n\nconst stackContextHint = {\n    fileName: \"node_modules/pino\",\n    methodNames: [\"log\", \"fatal\", \"error\", \"warn\", \"info\", \"debug\", \"trace\", \"silent\"],\n    required: true,\n};\nasync function logtailTransport(options) {\n    const logtail = new _logtail_node__WEBPACK_IMPORTED_MODULE_1__.Logtail(options.sourceToken, options.options);\n    const buildFunc = async (source) => {\n        var _a, e_1, _b, _c;\n        try {\n            for (var _d = true, source_1 = __asyncValues(source), source_1_1; source_1_1 = await source_1.next(), _a = source_1_1.done, !_a; _d = true) {\n                _c = source_1_1.value;\n                _d = false;\n                let obj = _c;\n                // Logging meta data\n                const meta = {};\n                // Copy `time` if set\n                if (typeof obj.time === \"string\" || obj.time.length) {\n                    const time = new Date(obj.time);\n                    if (!isNaN(time.valueOf())) {\n                        meta.dt = time;\n                    }\n                }\n                // Carry over any additional data fields\n                Object.keys(obj)\n                    .filter((key) => [\"time\", \"msg\", \"message\", \"level\", \"v\"].indexOf(key) < 0)\n                    .forEach((key) => (meta[key] = obj[key]));\n                // Get message\n                // NOTE: Pino passes messages as obj.msg but if user passes object to Pino it will pass it to us\n                //       even without 'msg' field. Later we map 'msg' -> 'message' so let's also read 'message' field.\n                const msg = obj.msg || obj.message;\n                // Prevent overriding 'message' with 'msg'\n                if (obj.msg !== undefined && obj.message !== undefined) {\n                    meta[\"message_field\"] = obj.message;\n                }\n                // Determine the log level\n                let level;\n                try {\n                    level = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.getLogLevel)(obj.level);\n                }\n                catch (_) {\n                    console.error(\"Error while mapping log level.\");\n                    continue;\n                }\n                // Log to Logtail\n                logtail.log(msg, level, meta, stackContextHint);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (!_d && !_a && (_b = source_1.return)) await _b.call(source_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    const closeFunc = async () => {\n        return await logtail.flush();\n    };\n    return pino_abstract_transport__WEBPACK_IMPORTED_MODULE_0___default()(buildFunc, { close: closeFunc });\n}\n//# sourceMappingURL=pino.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxvZ3RhaWwvcGluby9kaXN0L2VzNi9waW5vLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEscUJBQXFCLFNBQUksSUFBSSxTQUFJO0FBQ2pDO0FBQ0E7QUFDQSwyR0FBMkcsdUZBQXVGLGNBQWM7QUFDaE4sdUJBQXVCLDhCQUE4QixnREFBZ0Qsd0RBQXdEO0FBQzdKLDZDQUE2QyxzQ0FBc0MsVUFBVSxtQkFBbUIsSUFBSTtBQUNwSDtBQUM0QztBQUNKO0FBQ0E7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1Asd0JBQXdCLGtEQUFPO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RSwrREFBK0Q7QUFDN0k7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHFEQUFXO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDhEQUFLLGNBQWMsa0JBQWtCO0FBQ2hEO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxwcm9qZWN0c1xcYXRzXFxub2RlX21vZHVsZXNcXEBsb2d0YWlsXFxwaW5vXFxkaXN0XFxlczZcXHBpbm8uanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fYXN5bmNWYWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fYXN5bmNWYWx1ZXMpIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufTtcbmltcG9ydCBidWlsZCBmcm9tIFwicGluby1hYnN0cmFjdC10cmFuc3BvcnRcIjtcbmltcG9ydCB7IExvZ3RhaWwgfSBmcm9tIFwiQGxvZ3RhaWwvbm9kZVwiO1xuaW1wb3J0IHsgZ2V0TG9nTGV2ZWwgfSBmcm9tIFwiLi9oZWxwZXJzXCI7XG5jb25zdCBzdGFja0NvbnRleHRIaW50ID0ge1xuICAgIGZpbGVOYW1lOiBcIm5vZGVfbW9kdWxlcy9waW5vXCIsXG4gICAgbWV0aG9kTmFtZXM6IFtcImxvZ1wiLCBcImZhdGFsXCIsIFwiZXJyb3JcIiwgXCJ3YXJuXCIsIFwiaW5mb1wiLCBcImRlYnVnXCIsIFwidHJhY2VcIiwgXCJzaWxlbnRcIl0sXG4gICAgcmVxdWlyZWQ6IHRydWUsXG59O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvZ3RhaWxUcmFuc3BvcnQob3B0aW9ucykge1xuICAgIGNvbnN0IGxvZ3RhaWwgPSBuZXcgTG9ndGFpbChvcHRpb25zLnNvdXJjZVRva2VuLCBvcHRpb25zLm9wdGlvbnMpO1xuICAgIGNvbnN0IGJ1aWxkRnVuYyA9IGFzeW5jIChzb3VyY2UpID0+IHtcbiAgICAgICAgdmFyIF9hLCBlXzEsIF9iLCBfYztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIF9kID0gdHJ1ZSwgc291cmNlXzEgPSBfX2FzeW5jVmFsdWVzKHNvdXJjZSksIHNvdXJjZV8xXzE7IHNvdXJjZV8xXzEgPSBhd2FpdCBzb3VyY2VfMS5uZXh0KCksIF9hID0gc291cmNlXzFfMS5kb25lLCAhX2E7IF9kID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF9jID0gc291cmNlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICBfZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGxldCBvYmogPSBfYztcbiAgICAgICAgICAgICAgICAvLyBMb2dnaW5nIG1ldGEgZGF0YVxuICAgICAgICAgICAgICAgIGNvbnN0IG1ldGEgPSB7fTtcbiAgICAgICAgICAgICAgICAvLyBDb3B5IGB0aW1lYCBpZiBzZXRcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9iai50aW1lID09PSBcInN0cmluZ1wiIHx8IG9iai50aW1lLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0aW1lID0gbmV3IERhdGUob2JqLnRpbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHRpbWUudmFsdWVPZigpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0YS5kdCA9IHRpbWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQ2Fycnkgb3ZlciBhbnkgYWRkaXRpb25hbCBkYXRhIGZpZWxkc1xuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG9iailcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigoa2V5KSA9PiBbXCJ0aW1lXCIsIFwibXNnXCIsIFwibWVzc2FnZVwiLCBcImxldmVsXCIsIFwidlwiXS5pbmRleE9mKGtleSkgPCAwKVxuICAgICAgICAgICAgICAgICAgICAuZm9yRWFjaCgoa2V5KSA9PiAobWV0YVtrZXldID0gb2JqW2tleV0pKTtcbiAgICAgICAgICAgICAgICAvLyBHZXQgbWVzc2FnZVxuICAgICAgICAgICAgICAgIC8vIE5PVEU6IFBpbm8gcGFzc2VzIG1lc3NhZ2VzIGFzIG9iai5tc2cgYnV0IGlmIHVzZXIgcGFzc2VzIG9iamVjdCB0byBQaW5vIGl0IHdpbGwgcGFzcyBpdCB0byB1c1xuICAgICAgICAgICAgICAgIC8vICAgICAgIGV2ZW4gd2l0aG91dCAnbXNnJyBmaWVsZC4gTGF0ZXIgd2UgbWFwICdtc2cnIC0+ICdtZXNzYWdlJyBzbyBsZXQncyBhbHNvIHJlYWQgJ21lc3NhZ2UnIGZpZWxkLlxuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IG9iai5tc2cgfHwgb2JqLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCBvdmVycmlkaW5nICdtZXNzYWdlJyB3aXRoICdtc2cnXG4gICAgICAgICAgICAgICAgaWYgKG9iai5tc2cgIT09IHVuZGVmaW5lZCAmJiBvYmoubWVzc2FnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGFbXCJtZXNzYWdlX2ZpZWxkXCJdID0gb2JqLm1lc3NhZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIERldGVybWluZSB0aGUgbG9nIGxldmVsXG4gICAgICAgICAgICAgICAgbGV0IGxldmVsO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGxldmVsID0gZ2V0TG9nTGV2ZWwob2JqLmxldmVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKF8pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHdoaWxlIG1hcHBpbmcgbG9nIGxldmVsLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIExvZyB0byBMb2d0YWlsXG4gICAgICAgICAgICAgICAgbG9ndGFpbC5sb2cobXNnLCBsZXZlbCwgbWV0YSwgc3RhY2tDb250ZXh0SGludCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghX2QgJiYgIV9hICYmIChfYiA9IHNvdXJjZV8xLnJldHVybikpIGF3YWl0IF9iLmNhbGwoc291cmNlXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBjbG9zZUZ1bmMgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHJldHVybiBhd2FpdCBsb2d0YWlsLmZsdXNoKCk7XG4gICAgfTtcbiAgICByZXR1cm4gYnVpbGQoYnVpbGRGdW5jLCB7IGNsb3NlOiBjbG9zZUZ1bmMgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waW5vLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@logtail/pino/dist/es6/pino.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@logtail/tools/dist/es6/batch.js":
/*!*******************************************************!*\
  !*** ./node_modules/@logtail/tools/dist/es6/batch.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateJsonLogSizeBytes: () => (/* binding */ calculateJsonLogSizeBytes),\n/* harmony export */   \"default\": () => (/* binding */ makeBatch)\n/* harmony export */ });\n/*\n * Default buffer size\n */\nconst DEFAULT_BUFFER_SIZE = 1000;\n/*\n * Default flush timeout\n */\nconst DEFAULT_FLUSH_TIMEOUT = 1000;\n/*\n * Default retry count\n */\nconst DEFAULT_RETRY_COUNT = 3;\n/*\n * Default retry backoff\n */\nconst DEFAULT_RETRY_BACKOFF = 100;\n/*\n * Default function for computing log size (serialized JSON length + 1 for comma)\n */\nconst calculateJsonLogSizeBytes = (log) => JSON.stringify(log).length + 1;\n/**\n * batch the buffer coming in, process them and then resolve\n *\n * @param size - Number\n * @param flushTimeout - Number\n * @param retryCount - Number\n * @param retryBackoff - Number\n * @param sizeBytes - Size of the batch (in bytes) that triggers flushing. Set to 0 to disable.\n * @param calculateLogSizeBytes - Function to calculate size of a single ILogtailLog instance (in bytes).\n */\nfunction makeBatch(size = DEFAULT_BUFFER_SIZE, flushTimeout = DEFAULT_FLUSH_TIMEOUT, retryCount = DEFAULT_RETRY_COUNT, retryBackoff = DEFAULT_RETRY_BACKOFF, sizeBytes = 0, calculateLogSizeBytes = calculateJsonLogSizeBytes) {\n    let timeout;\n    let cb;\n    let buffer = [];\n    let bufferSizeBytes = 0;\n    let retry = 0;\n    // Wait until the minimum retry backoff time has passed before retrying\n    let minRetryBackoff = 0;\n    /*\n     * Process then flush the list\n     */\n    async function flush() {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n        timeout = null;\n        const currentBuffer = buffer;\n        const currentBufferSizeKB = bufferSizeBytes;\n        buffer = [];\n        bufferSizeBytes = 0;\n        try {\n            await cb(currentBuffer.map((d) => d.log));\n            currentBuffer.forEach((d) => d.resolve(d.log));\n            retry = 0;\n        }\n        catch (e) {\n            if (retry < retryCount) {\n                retry++;\n                minRetryBackoff = Date.now() + retryBackoff;\n                buffer = buffer.concat(currentBuffer);\n                bufferSizeBytes += currentBufferSizeKB;\n                await setupTimeout();\n                return;\n            }\n            currentBuffer.map((d) => d.reject(e));\n            retry = 0;\n        }\n    }\n    /*\n     * Start timeout to flush\n     */\n    async function setupTimeout() {\n        if (timeout) {\n            return;\n        }\n        return new Promise((resolve) => {\n            timeout = setTimeout(async function () {\n                await flush();\n                resolve();\n            }, flushTimeout);\n        });\n    }\n    /*\n     * Batcher which takes a process function\n     * @param fn - Any function to process list\n     */\n    return {\n        initPusher: function (fn) {\n            cb = fn;\n            /*\n             * Pushes each log into list\n             * @param log: ILogtailLog - Any object to push into list\n             */\n            return async function (log) {\n                return new Promise(async (resolve, reject) => {\n                    buffer.push({ log, resolve, reject });\n                    // We can skip log size calculation if there is no max size set\n                    if (sizeBytes > 0) {\n                        bufferSizeBytes += calculateLogSizeBytes(log);\n                    }\n                    // If the buffer is full enough, flush it\n                    // Unless we're still waiting for the minimum retry backoff time\n                    const isBufferFullEnough = buffer.length >= size || (sizeBytes > 0 && bufferSizeBytes >= sizeBytes);\n                    if (isBufferFullEnough && Date.now() > minRetryBackoff) {\n                        await flush();\n                    }\n                    else {\n                        await setupTimeout();\n                    }\n                    return resolve;\n                });\n            };\n        },\n        flush,\n    };\n}\n//# sourceMappingURL=batch.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxvZ3RhaWwvdG9vbHMvZGlzdC9lczYvYmF0Y2guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxzQkFBc0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXHByb2plY3RzXFxhdHNcXG5vZGVfbW9kdWxlc1xcQGxvZ3RhaWxcXHRvb2xzXFxkaXN0XFxlczZcXGJhdGNoLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBEZWZhdWx0IGJ1ZmZlciBzaXplXG4gKi9cbmNvbnN0IERFRkFVTFRfQlVGRkVSX1NJWkUgPSAxMDAwO1xuLypcbiAqIERlZmF1bHQgZmx1c2ggdGltZW91dFxuICovXG5jb25zdCBERUZBVUxUX0ZMVVNIX1RJTUVPVVQgPSAxMDAwO1xuLypcbiAqIERlZmF1bHQgcmV0cnkgY291bnRcbiAqL1xuY29uc3QgREVGQVVMVF9SRVRSWV9DT1VOVCA9IDM7XG4vKlxuICogRGVmYXVsdCByZXRyeSBiYWNrb2ZmXG4gKi9cbmNvbnN0IERFRkFVTFRfUkVUUllfQkFDS09GRiA9IDEwMDtcbi8qXG4gKiBEZWZhdWx0IGZ1bmN0aW9uIGZvciBjb21wdXRpbmcgbG9nIHNpemUgKHNlcmlhbGl6ZWQgSlNPTiBsZW5ndGggKyAxIGZvciBjb21tYSlcbiAqL1xuZXhwb3J0IGNvbnN0IGNhbGN1bGF0ZUpzb25Mb2dTaXplQnl0ZXMgPSAobG9nKSA9PiBKU09OLnN0cmluZ2lmeShsb2cpLmxlbmd0aCArIDE7XG4vKipcbiAqIGJhdGNoIHRoZSBidWZmZXIgY29taW5nIGluLCBwcm9jZXNzIHRoZW0gYW5kIHRoZW4gcmVzb2x2ZVxuICpcbiAqIEBwYXJhbSBzaXplIC0gTnVtYmVyXG4gKiBAcGFyYW0gZmx1c2hUaW1lb3V0IC0gTnVtYmVyXG4gKiBAcGFyYW0gcmV0cnlDb3VudCAtIE51bWJlclxuICogQHBhcmFtIHJldHJ5QmFja29mZiAtIE51bWJlclxuICogQHBhcmFtIHNpemVCeXRlcyAtIFNpemUgb2YgdGhlIGJhdGNoIChpbiBieXRlcykgdGhhdCB0cmlnZ2VycyBmbHVzaGluZy4gU2V0IHRvIDAgdG8gZGlzYWJsZS5cbiAqIEBwYXJhbSBjYWxjdWxhdGVMb2dTaXplQnl0ZXMgLSBGdW5jdGlvbiB0byBjYWxjdWxhdGUgc2l6ZSBvZiBhIHNpbmdsZSBJTG9ndGFpbExvZyBpbnN0YW5jZSAoaW4gYnl0ZXMpLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWtlQmF0Y2goc2l6ZSA9IERFRkFVTFRfQlVGRkVSX1NJWkUsIGZsdXNoVGltZW91dCA9IERFRkFVTFRfRkxVU0hfVElNRU9VVCwgcmV0cnlDb3VudCA9IERFRkFVTFRfUkVUUllfQ09VTlQsIHJldHJ5QmFja29mZiA9IERFRkFVTFRfUkVUUllfQkFDS09GRiwgc2l6ZUJ5dGVzID0gMCwgY2FsY3VsYXRlTG9nU2l6ZUJ5dGVzID0gY2FsY3VsYXRlSnNvbkxvZ1NpemVCeXRlcykge1xuICAgIGxldCB0aW1lb3V0O1xuICAgIGxldCBjYjtcbiAgICBsZXQgYnVmZmVyID0gW107XG4gICAgbGV0IGJ1ZmZlclNpemVCeXRlcyA9IDA7XG4gICAgbGV0IHJldHJ5ID0gMDtcbiAgICAvLyBXYWl0IHVudGlsIHRoZSBtaW5pbXVtIHJldHJ5IGJhY2tvZmYgdGltZSBoYXMgcGFzc2VkIGJlZm9yZSByZXRyeWluZ1xuICAgIGxldCBtaW5SZXRyeUJhY2tvZmYgPSAwO1xuICAgIC8qXG4gICAgICogUHJvY2VzcyB0aGVuIGZsdXNoIHRoZSBsaXN0XG4gICAgICovXG4gICAgYXN5bmMgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRCdWZmZXIgPSBidWZmZXI7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRCdWZmZXJTaXplS0IgPSBidWZmZXJTaXplQnl0ZXM7XG4gICAgICAgIGJ1ZmZlciA9IFtdO1xuICAgICAgICBidWZmZXJTaXplQnl0ZXMgPSAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgY2IoY3VycmVudEJ1ZmZlci5tYXAoKGQpID0+IGQubG9nKSk7XG4gICAgICAgICAgICBjdXJyZW50QnVmZmVyLmZvckVhY2goKGQpID0+IGQucmVzb2x2ZShkLmxvZykpO1xuICAgICAgICAgICAgcmV0cnkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBpZiAocmV0cnkgPCByZXRyeUNvdW50KSB7XG4gICAgICAgICAgICAgICAgcmV0cnkrKztcbiAgICAgICAgICAgICAgICBtaW5SZXRyeUJhY2tvZmYgPSBEYXRlLm5vdygpICsgcmV0cnlCYWNrb2ZmO1xuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5jb25jYXQoY3VycmVudEJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgYnVmZmVyU2l6ZUJ5dGVzICs9IGN1cnJlbnRCdWZmZXJTaXplS0I7XG4gICAgICAgICAgICAgICAgYXdhaXQgc2V0dXBUaW1lb3V0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudEJ1ZmZlci5tYXAoKGQpID0+IGQucmVqZWN0KGUpKTtcbiAgICAgICAgICAgIHJldHJ5ID0gMDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKlxuICAgICAqIFN0YXJ0IHRpbWVvdXQgdG8gZmx1c2hcbiAgICAgKi9cbiAgICBhc3luYyBmdW5jdGlvbiBzZXR1cFRpbWVvdXQoKSB7XG4gICAgICAgIGlmICh0aW1lb3V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgZmx1c2goKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9LCBmbHVzaFRpbWVvdXQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLypcbiAgICAgKiBCYXRjaGVyIHdoaWNoIHRha2VzIGEgcHJvY2VzcyBmdW5jdGlvblxuICAgICAqIEBwYXJhbSBmbiAtIEFueSBmdW5jdGlvbiB0byBwcm9jZXNzIGxpc3RcbiAgICAgKi9cbiAgICByZXR1cm4ge1xuICAgICAgICBpbml0UHVzaGVyOiBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgIGNiID0gZm47XG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgICogUHVzaGVzIGVhY2ggbG9nIGludG8gbGlzdFxuICAgICAgICAgICAgICogQHBhcmFtIGxvZzogSUxvZ3RhaWxMb2cgLSBBbnkgb2JqZWN0IHRvIHB1c2ggaW50byBsaXN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiAobG9nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnB1c2goeyBsb2csIHJlc29sdmUsIHJlamVjdCB9KTtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2FuIHNraXAgbG9nIHNpemUgY2FsY3VsYXRpb24gaWYgdGhlcmUgaXMgbm8gbWF4IHNpemUgc2V0XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaXplQnl0ZXMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXJTaXplQnl0ZXMgKz0gY2FsY3VsYXRlTG9nU2l6ZUJ5dGVzKGxvZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlIGJ1ZmZlciBpcyBmdWxsIGVub3VnaCwgZmx1c2ggaXRcbiAgICAgICAgICAgICAgICAgICAgLy8gVW5sZXNzIHdlJ3JlIHN0aWxsIHdhaXRpbmcgZm9yIHRoZSBtaW5pbXVtIHJldHJ5IGJhY2tvZmYgdGltZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0J1ZmZlckZ1bGxFbm91Z2ggPSBidWZmZXIubGVuZ3RoID49IHNpemUgfHwgKHNpemVCeXRlcyA+IDAgJiYgYnVmZmVyU2l6ZUJ5dGVzID49IHNpemVCeXRlcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0J1ZmZlckZ1bGxFbm91Z2ggJiYgRGF0ZS5ub3coKSA+IG1pblJldHJ5QmFja29mZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgZmx1c2goKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNldHVwVGltZW91dCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZmx1c2gsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhdGNoLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@logtail/tools/dist/es6/batch.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@logtail/tools/dist/es6/burstProtection.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@logtail/tools/dist/es6/burstProtection.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ makeBurstProtection)\n/* harmony export */ });\nconst RESOLUTION = 64;\n/**\n * Create a burst protection which allows running function only a number of times in a configurable window\n * @param milliseconds - length of the checked window in milliseconds\n * @param max - maximum number of functions to run in that window\n * @param functionName - function name for error message\n */\nfunction makeBurstProtection(milliseconds, max, functionName = \"The function\") {\n    if (milliseconds <= 0 || max <= 0) {\n        return (fn) => fn;\n    }\n    let callCounts = [0];\n    let lastErrorOutput = 0;\n    let lastIntervalTime = Date.now();\n    function updateCallCounts() {\n        const now = Date.now();\n        const intervalLength = milliseconds / RESOLUTION;\n        if (now < lastIntervalTime + intervalLength) {\n            return;\n        }\n        // Prepend callCounts with correct number of zeroes and keep its length to RESOLUTION at max\n        const intervalCountSinceLast = Math.floor((now - lastIntervalTime) / intervalLength);\n        callCounts = Array(Math.min(intervalCountSinceLast, RESOLUTION)).fill(0).concat(callCounts).slice(0, RESOLUTION);\n        lastIntervalTime += intervalCountSinceLast * intervalLength;\n    }\n    function getTotalCallCount() {\n        return callCounts.reduce((total, item) => total + item);\n    }\n    function incrementCallCount() {\n        callCounts[0]++;\n    }\n    return (fn) => {\n        return async (...args) => {\n            updateCallCounts();\n            if (getTotalCallCount() < max) {\n                incrementCallCount();\n                return await fn(...args);\n            }\n            const now = Date.now();\n            if (lastErrorOutput < now - milliseconds) {\n                lastErrorOutput = now;\n                console.error(`${functionName} was called more than ${max} times during last ${milliseconds}ms. Ignoring.`);\n            }\n        };\n    };\n}\n//# sourceMappingURL=burstProtection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxvZ3RhaWwvdG9vbHMvZGlzdC9lczYvYnVyc3RQcm90ZWN0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGNBQWMsdUJBQXVCLEtBQUssb0JBQW9CLGFBQWE7QUFDNUc7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXHByb2plY3RzXFxhdHNcXG5vZGVfbW9kdWxlc1xcQGxvZ3RhaWxcXHRvb2xzXFxkaXN0XFxlczZcXGJ1cnN0UHJvdGVjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSRVNPTFVUSU9OID0gNjQ7XG4vKipcbiAqIENyZWF0ZSBhIGJ1cnN0IHByb3RlY3Rpb24gd2hpY2ggYWxsb3dzIHJ1bm5pbmcgZnVuY3Rpb24gb25seSBhIG51bWJlciBvZiB0aW1lcyBpbiBhIGNvbmZpZ3VyYWJsZSB3aW5kb3dcbiAqIEBwYXJhbSBtaWxsaXNlY29uZHMgLSBsZW5ndGggb2YgdGhlIGNoZWNrZWQgd2luZG93IGluIG1pbGxpc2Vjb25kc1xuICogQHBhcmFtIG1heCAtIG1heGltdW0gbnVtYmVyIG9mIGZ1bmN0aW9ucyB0byBydW4gaW4gdGhhdCB3aW5kb3dcbiAqIEBwYXJhbSBmdW5jdGlvbk5hbWUgLSBmdW5jdGlvbiBuYW1lIGZvciBlcnJvciBtZXNzYWdlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1ha2VCdXJzdFByb3RlY3Rpb24obWlsbGlzZWNvbmRzLCBtYXgsIGZ1bmN0aW9uTmFtZSA9IFwiVGhlIGZ1bmN0aW9uXCIpIHtcbiAgICBpZiAobWlsbGlzZWNvbmRzIDw9IDAgfHwgbWF4IDw9IDApIHtcbiAgICAgICAgcmV0dXJuIChmbikgPT4gZm47XG4gICAgfVxuICAgIGxldCBjYWxsQ291bnRzID0gWzBdO1xuICAgIGxldCBsYXN0RXJyb3JPdXRwdXQgPSAwO1xuICAgIGxldCBsYXN0SW50ZXJ2YWxUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBmdW5jdGlvbiB1cGRhdGVDYWxsQ291bnRzKCkge1xuICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgICAgICBjb25zdCBpbnRlcnZhbExlbmd0aCA9IG1pbGxpc2Vjb25kcyAvIFJFU09MVVRJT047XG4gICAgICAgIGlmIChub3cgPCBsYXN0SW50ZXJ2YWxUaW1lICsgaW50ZXJ2YWxMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmVwZW5kIGNhbGxDb3VudHMgd2l0aCBjb3JyZWN0IG51bWJlciBvZiB6ZXJvZXMgYW5kIGtlZXAgaXRzIGxlbmd0aCB0byBSRVNPTFVUSU9OIGF0IG1heFxuICAgICAgICBjb25zdCBpbnRlcnZhbENvdW50U2luY2VMYXN0ID0gTWF0aC5mbG9vcigobm93IC0gbGFzdEludGVydmFsVGltZSkgLyBpbnRlcnZhbExlbmd0aCk7XG4gICAgICAgIGNhbGxDb3VudHMgPSBBcnJheShNYXRoLm1pbihpbnRlcnZhbENvdW50U2luY2VMYXN0LCBSRVNPTFVUSU9OKSkuZmlsbCgwKS5jb25jYXQoY2FsbENvdW50cykuc2xpY2UoMCwgUkVTT0xVVElPTik7XG4gICAgICAgIGxhc3RJbnRlcnZhbFRpbWUgKz0gaW50ZXJ2YWxDb3VudFNpbmNlTGFzdCAqIGludGVydmFsTGVuZ3RoO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRUb3RhbENhbGxDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxDb3VudHMucmVkdWNlKCh0b3RhbCwgaXRlbSkgPT4gdG90YWwgKyBpdGVtKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5jcmVtZW50Q2FsbENvdW50KCkge1xuICAgICAgICBjYWxsQ291bnRzWzBdKys7XG4gICAgfVxuICAgIHJldHVybiAoZm4pID0+IHtcbiAgICAgICAgcmV0dXJuIGFzeW5jICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICB1cGRhdGVDYWxsQ291bnRzKCk7XG4gICAgICAgICAgICBpZiAoZ2V0VG90YWxDYWxsQ291bnQoKSA8IG1heCkge1xuICAgICAgICAgICAgICAgIGluY3JlbWVudENhbGxDb3VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBmbiguLi5hcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICBpZiAobGFzdEVycm9yT3V0cHV0IDwgbm93IC0gbWlsbGlzZWNvbmRzKSB7XG4gICAgICAgICAgICAgICAgbGFzdEVycm9yT3V0cHV0ID0gbm93O1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYCR7ZnVuY3Rpb25OYW1lfSB3YXMgY2FsbGVkIG1vcmUgdGhhbiAke21heH0gdGltZXMgZHVyaW5nIGxhc3QgJHttaWxsaXNlY29uZHN9bXMuIElnbm9yaW5nLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idXJzdFByb3RlY3Rpb24uanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@logtail/tools/dist/es6/burstProtection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@logtail/tools/dist/es6/queue.js":
/*!*******************************************************!*\
  !*** ./node_modules/@logtail/tools/dist/es6/queue.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Queue)\n/* harmony export */ });\n/**\n * Queue, for FIFO access to arbitrary objects. Intended to be a faster\n * replacement for a Javascript array.\n */\nclass Queue {\n    constructor() {\n        /**\n         * First node in the tree\n         */\n        /**\n         * Number of items in the queue\n         */\n        this.length = 0;\n    }\n    /**\n     * Pushes a value into the queue.\n     * @param value - Any object to push into the queue\n     */\n    push(value) {\n        const node = { value };\n        this.last = this.last ? (this.last.next = node) : (this.first = node);\n        this.length++;\n    }\n    /**\n     * Remove a value from the start of the queue (FIFO) and return it\n     */\n    shift() {\n        if (this.first) {\n            const { value } = this.first;\n            this.first = this.first.next;\n            if (!--this.length) {\n                this.last = undefined;\n            }\n            return value;\n        }\n    }\n}\n//# sourceMappingURL=queue.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxvZ3RhaWwvdG9vbHMvZGlzdC9lczYvcXVldWUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ2U7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkQ6XFxwcm9qZWN0c1xcYXRzXFxub2RlX21vZHVsZXNcXEBsb2d0YWlsXFx0b29sc1xcZGlzdFxcZXM2XFxxdWV1ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFF1ZXVlLCBmb3IgRklGTyBhY2Nlc3MgdG8gYXJiaXRyYXJ5IG9iamVjdHMuIEludGVuZGVkIHRvIGJlIGEgZmFzdGVyXG4gKiByZXBsYWNlbWVudCBmb3IgYSBKYXZhc2NyaXB0IGFycmF5LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBRdWV1ZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJzdCBub2RlIGluIHRoZSB0cmVlXG4gICAgICAgICAqL1xuICAgICAgICAvKipcbiAgICAgICAgICogTnVtYmVyIG9mIGl0ZW1zIGluIHRoZSBxdWV1ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQdXNoZXMgYSB2YWx1ZSBpbnRvIHRoZSBxdWV1ZS5cbiAgICAgKiBAcGFyYW0gdmFsdWUgLSBBbnkgb2JqZWN0IHRvIHB1c2ggaW50byB0aGUgcXVldWVcbiAgICAgKi9cbiAgICBwdXNoKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB7IHZhbHVlIH07XG4gICAgICAgIHRoaXMubGFzdCA9IHRoaXMubGFzdCA/ICh0aGlzLmxhc3QubmV4dCA9IG5vZGUpIDogKHRoaXMuZmlyc3QgPSBub2RlKTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEgdmFsdWUgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIHF1ZXVlIChGSUZPKSBhbmQgcmV0dXJuIGl0XG4gICAgICovXG4gICAgc2hpZnQoKSB7XG4gICAgICAgIGlmICh0aGlzLmZpcnN0KSB7XG4gICAgICAgICAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLmZpcnN0O1xuICAgICAgICAgICAgdGhpcy5maXJzdCA9IHRoaXMuZmlyc3QubmV4dDtcbiAgICAgICAgICAgIGlmICghLS10aGlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXVlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@logtail/tools/dist/es6/queue.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@logtail/tools/dist/es6/throttle.js":
/*!**********************************************************!*\
  !*** ./node_modules/@logtail/tools/dist/es6/throttle.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ makeThrottle)\n/* harmony export */ });\n/* harmony import */ var _queue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./queue */ \"(rsc)/./node_modules/@logtail/tools/dist/es6/queue.js\");\n\n/**\n * Create a throttle which runs up to `max` async functions at once\n * @param max - maximum number of async functions to run\n */\nfunction makeThrottle(max) {\n    // Current iteration cycle\n    let current = 0;\n    // Create a FIFO queue\n    const queue = new _queue__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    /**\n     * Throttle function that throttles the passed func according to `max`\n     * @param fn - async function to resolve\n     */\n    function throttle(fn) {\n        return async (...args) => {\n            return new Promise((resolve, reject) => {\n                /**\n                 * Handler for resolving the Promise chain\n                 */\n                async function handler() {\n                    // Only resolve if the `max` hasn't been exhausted\n                    if (current < max) {\n                        // Increment the available slot size\n                        current++;\n                        try {\n                            // Await the passed function here first, to determine if any\n                            // errors are thrown, so they can be handled by our outside `reject`\n                            resolve(await fn(...args));\n                        }\n                        catch (e) {\n                            reject(e);\n                        }\n                        // Since this has now resolved, make the slot available again\n                        current--;\n                        // If there are items waiting in the queue, resolve the next\n                        // Promise\n                        if (queue.length > 0) {\n                            queue.shift()();\n                        }\n                    }\n                    else {\n                        // The `max` has been exceeded - push onto the queue to wait\n                        queue.push(handler);\n                    }\n                }\n                // Return the async handler\n                return handler();\n            });\n        };\n    }\n    // Return the throttle function\n    return throttle;\n}\n//# sourceMappingURL=throttle.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxvZ3RhaWwvdG9vbHMvZGlzdC9lczYvdGhyb3R0bGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw4Q0FBSztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiRDpcXHByb2plY3RzXFxhdHNcXG5vZGVfbW9kdWxlc1xcQGxvZ3RhaWxcXHRvb2xzXFxkaXN0XFxlczZcXHRocm90dGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBRdWV1ZSBmcm9tIFwiLi9xdWV1ZVwiO1xuLyoqXG4gKiBDcmVhdGUgYSB0aHJvdHRsZSB3aGljaCBydW5zIHVwIHRvIGBtYXhgIGFzeW5jIGZ1bmN0aW9ucyBhdCBvbmNlXG4gKiBAcGFyYW0gbWF4IC0gbWF4aW11bSBudW1iZXIgb2YgYXN5bmMgZnVuY3Rpb25zIHRvIHJ1blxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWtlVGhyb3R0bGUobWF4KSB7XG4gICAgLy8gQ3VycmVudCBpdGVyYXRpb24gY3ljbGVcbiAgICBsZXQgY3VycmVudCA9IDA7XG4gICAgLy8gQ3JlYXRlIGEgRklGTyBxdWV1ZVxuICAgIGNvbnN0IHF1ZXVlID0gbmV3IFF1ZXVlKCk7XG4gICAgLyoqXG4gICAgICogVGhyb3R0bGUgZnVuY3Rpb24gdGhhdCB0aHJvdHRsZXMgdGhlIHBhc3NlZCBmdW5jIGFjY29yZGluZyB0byBgbWF4YFxuICAgICAqIEBwYXJhbSBmbiAtIGFzeW5jIGZ1bmN0aW9uIHRvIHJlc29sdmVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmbikge1xuICAgICAgICByZXR1cm4gYXN5bmMgKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogSGFuZGxlciBmb3IgcmVzb2x2aW5nIHRoZSBQcm9taXNlIGNoYWluXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcigpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gT25seSByZXNvbHZlIGlmIHRoZSBgbWF4YCBoYXNuJ3QgYmVlbiBleGhhdXN0ZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgPCBtYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluY3JlbWVudCB0aGUgYXZhaWxhYmxlIHNsb3Qgc2l6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBBd2FpdCB0aGUgcGFzc2VkIGZ1bmN0aW9uIGhlcmUgZmlyc3QsIHRvIGRldGVybWluZSBpZiBhbnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlcnJvcnMgYXJlIHRocm93biwgc28gdGhleSBjYW4gYmUgaGFuZGxlZCBieSBvdXIgb3V0c2lkZSBgcmVqZWN0YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYXdhaXQgZm4oLi4uYXJncykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB0aGlzIGhhcyBub3cgcmVzb2x2ZWQsIG1ha2UgdGhlIHNsb3QgYXZhaWxhYmxlIGFnYWluXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LS07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgaXRlbXMgd2FpdGluZyBpbiB0aGUgcXVldWUsIHJlc29sdmUgdGhlIG5leHRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFByb21pc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVldWUuc2hpZnQoKSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGBtYXhgIGhhcyBiZWVuIGV4Y2VlZGVkIC0gcHVzaCBvbnRvIHRoZSBxdWV1ZSB0byB3YWl0XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWV1ZS5wdXNoKGhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFJldHVybiB0aGUgYXN5bmMgaGFuZGxlclxuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVyKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gUmV0dXJuIHRoZSB0aHJvdHRsZSBmdW5jdGlvblxuICAgIHJldHVybiB0aHJvdHRsZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRocm90dGxlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@logtail/tools/dist/es6/throttle.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@logtail/types/dist/es6/types.js":
/*!*******************************************************!*\
  !*** ./node_modules/@logtail/types/dist/es6/types.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel)\n/* harmony export */ });\n/**\n * Logtail library options\n */\nvar LogLevel;\n(function (LogLevel) {\n    // core log levels - available as functions\n    LogLevel[\"Error\"] = \"error\";\n    LogLevel[\"Warn\"] = \"warn\";\n    LogLevel[\"Info\"] = \"info\";\n    LogLevel[\"Debug\"] = \"debug\";\n    // extra log levels - recognized when passed from logging frameworks\n    LogLevel[\"Fatal\"] = \"fatal\";\n    LogLevel[\"Http\"] = \"http\";\n    LogLevel[\"Verbose\"] = \"verbose\";\n    LogLevel[\"Silly\"] = \"silly\";\n    LogLevel[\"Trace\"] = \"trace\";\n})(LogLevel || (LogLevel = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGxvZ3RhaWwvdHlwZXMvZGlzdC9lczYvdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw0QkFBNEI7QUFDN0IiLCJzb3VyY2VzIjpbIkQ6XFxwcm9qZWN0c1xcYXRzXFxub2RlX21vZHVsZXNcXEBsb2d0YWlsXFx0eXBlc1xcZGlzdFxcZXM2XFx0eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIExvZ3RhaWwgbGlicmFyeSBvcHRpb25zXG4gKi9cbmV4cG9ydCB2YXIgTG9nTGV2ZWw7XG4oZnVuY3Rpb24gKExvZ0xldmVsKSB7XG4gICAgLy8gY29yZSBsb2cgbGV2ZWxzIC0gYXZhaWxhYmxlIGFzIGZ1bmN0aW9uc1xuICAgIExvZ0xldmVsW1wiRXJyb3JcIl0gPSBcImVycm9yXCI7XG4gICAgTG9nTGV2ZWxbXCJXYXJuXCJdID0gXCJ3YXJuXCI7XG4gICAgTG9nTGV2ZWxbXCJJbmZvXCJdID0gXCJpbmZvXCI7XG4gICAgTG9nTGV2ZWxbXCJEZWJ1Z1wiXSA9IFwiZGVidWdcIjtcbiAgICAvLyBleHRyYSBsb2cgbGV2ZWxzIC0gcmVjb2duaXplZCB3aGVuIHBhc3NlZCBmcm9tIGxvZ2dpbmcgZnJhbWV3b3Jrc1xuICAgIExvZ0xldmVsW1wiRmF0YWxcIl0gPSBcImZhdGFsXCI7XG4gICAgTG9nTGV2ZWxbXCJIdHRwXCJdID0gXCJodHRwXCI7XG4gICAgTG9nTGV2ZWxbXCJWZXJib3NlXCJdID0gXCJ2ZXJib3NlXCI7XG4gICAgTG9nTGV2ZWxbXCJTaWxseVwiXSA9IFwic2lsbHlcIjtcbiAgICBMb2dMZXZlbFtcIlRyYWNlXCJdID0gXCJ0cmFjZVwiO1xufSkoTG9nTGV2ZWwgfHwgKExvZ0xldmVsID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@logtail/types/dist/es6/types.js\n");

/***/ })

};
;